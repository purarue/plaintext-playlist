#!/bin/bash
# plainplay, an script to maintain plaintext playlists
# see https://github.com/seanbreckenridge/plaintext-playlist
#
# For reference, variable styling is:
# ENVIRONMENT_VARIABLES
# GlobalVariables
# temporaryVariables

# Global Variables
ConfDir=
MusicDir=
# defaults to fzf interactive if not set
ReadInputType=MULTI_SELECT_FZF
ResolveAutoConfirm=
Action=
ActivePlaylist=

PromptHistoryFile="${PLAINTEXT_PLAYLIST_HISTORY:-${XDG_CACHE_HOME:-$HOME/.cache}}/plaintext_playlist_history.txt"

# error helper
abort() {
	echo "$1" 1>&2
	exit 1
}

# require that a executable be installed
require() {
	if [[ ! $(command -v "$1") ]]; then
		abort "This part of the application requires ${1}, but I can't seem to find it on your \$PATH"
	fi
}
require realpath
require printf
require sed

# HELP RELATED

# A list of commands
commands_list() {
	cat <<EOF
add <playlist>                | Adds one or more songs to a playlist
remove <playlist>             | Removes one of more songs from a playlist
play <playlist>               | Play songs from a playlist
shuffle <playlist>            | Shuffle songs from a playlist
list <playlist>               | List songs in a playlist
unique <playlist>             | Removes duplicates from a playlist
playlist-create <playlist>    | Creates a new playlist - a playlist file
playlist-remove <playlist>    | Removes an existing playlist - deletes a playlist file
playlist-list                 | List the full paths of each of your playlist files
playlistdir                   | Print the location of the playlist directory
check                         | Makes sure that all songs in all your playlists exist
resolve                       | Attempts to fix broken paths in playlists
EOF
}

# print help for user
print_help() {
	cat <<EOF
Usage: plaintext [-h] [-] [COMMAND [ARGS]]

  Interactive terminal playlist manager, storing contents in readable text files
  run without a COMMAND to drop into interactive mode

  add and remove defaults to presenting you an
  fzf interface to add/remove items.

  A hyphen (-) can be passed with add
  to instead recieve filenames from stdin
  expects filenames to be in the correct format
  (cd to your Music dir and use find for good results)
  
  --auto-confirm can be passed with 'resolve' to automatically
  use the closest match instead of prompting you to choose
  one of the closest matching files to fix broken filepaths

  e.g.: find somedirectory -name "*.flac" | plainplay - add rock

  <playlist> specifies either the
  name (without the location/.txt extension)
  or the location of one of the playlists

EOF
	commands_list
	exit 0
}

# prints help and exits if the user asked for help
check_for_help() {
	if [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ] || [ "$1" = "help" ]; then
		print_help
		exit 0
	fi
}

# APPLICATION SETUP

# resolve configuration location, setup playlist dir
application_setup() {
	# PLAINTEXT_PLAYLIST_PLAYLISTS can be set by the user to override,
	# else respect XDG, else put config in ~/.local/share/plaintext_playlist
	ConfDir="${PLAINTEXT_PLAYLIST_PLAYLISTS:=${XDG_DATA_HOME:-$HOME/.local/share}/plaintext_playlist}"
	# error if user hasn't set music dir
	MusicDir="${PLAINTEXT_PLAYLIST_MUSIC_DIR?:'ERROR PLAINTEXT_PLAYLIST_MUSIC_DIR (your root music folder) is not set as an environment variable. e.g.: PLAINTEXT_PLAYLIST_MUSIC_DIR=~/Music plainplay.'}"
	if [ ! -d "$MusicDir" ]; then
		abort "Error: ${PLAINTEXT_PLAYLIST_MUSIC_DIR} doesn't exist.\nThat should be the main, top-level folder where you keep your music locally."
	fi
	# create playlist dir if it doesnt exist.
	if [ ! -d "$ConfDir" ]; then
		printf "Creating playlist directory at '%s'\n" "$ConfDir"
		mkdir -p "$ConfDir" || exit 1
	fi
}

# ARGUMENT PARSING/PROMPTING

# parse arguments from command line.
parse_args() {
	while [[ -n "$1" ]]; do
		case "$1" in
		add)
			Action=ADD
			ActivePlaylist="$2"
			shift
			;;
		remove)
			Action=REMOVE
			ActivePlaylist="$2"
			shift
			;;
		list)
			Action=LIST
			ActivePlaylist="$2"
			shift
			break
			;;
		play)
			Action=PLAY
			ActivePlaylist="$2"
			shift
			break
			;;
		shuffle)
			Action=SHUFFLE
			ActivePlaylist="$2"
			shift
			break
			;;
		unique)
			Action=UNIQUE
			ActivePlaylist="$2"
			shift
			break
			;;
		playlist-create)
			Action=PLAYLIST_CREATE
			ActivePlaylist="$2"
			shift
			break
			;;

		playlist-remove)
			Action=PLAYLIST_REMOVE
			ActivePlaylist="$2"
			shift
			break
			;;

		playlist-list)
			Action=PLAYLIST_LIST
			break
			;;

		playlistdir)
			Action=PLAYLISTDIR
			break
			;;

		check)
			Action=CHECK
			break
			;;
		resolve)
			Action=RESOLVE
			;;
		-)
			ReadInputType=FROM_STDIN
			;;
		--auto-confirm)
			ResolveAutoConfirm="--auto-confirm"
			;;
		*)
			printf "Error: Unexpected argument: %s\n\n" "$1" 1>&2
			print_help
			exit 1
			;;
		esac
		shift # remove keyword
	done
	# if nothing was passed by the user
	if [ -z "$Action" ]; then
		pick_command_interactive
	fi
}

# prompts the user with the list of commands, and lets them select one of them
pick_command_interactive() {
	require fzf
	if ! rawFzfChoice=$(commands_list | fzf -i --prompt='Run > ' --history="$PromptHistoryFile"); then
		abort "Error: You didn't provide a valid command."
	fi
	# get the first argument (e.g. add|remove|playlist-list)
	firstArg=("${rawFzfChoice%% *| *}")
	parse_args "${firstArg[@]}"
}

# returns the playlist path for a path/name if it exists.
# If -x is provided as the second argument, exits if playlist path doesn't exist
get_playlist_path() {
	fullPath=$(realpath "$1")
	# if the full path exists
	if [ -e "$fullPath" ]; then
		echo -e "$fullPath"
	# else if the file is just a name (e.g. rock{,.txt} for $ConfDir/rock.txt)
	else
		fullPath="${ConfDir}/${1%.txt}.txt"
		if [ -f "$fullPath" ]; then
			echo -e "$fullPath"
		else
			# if not told to exit, prints the path, even though the path may not exist
			if [ "$2" = "-x" ]; then
				abort "Error: Could not find a matching playlist for: ${1}."
			else
				echo -e "$fullPath"
			fi
		fi
	fi
}

# presents the user with a prompt of playlists to choose from
pick_existing_playlist() {
	require fzf
	if [ "$(playlist_count)" = "0" ]; then
		abort "Error: No playlists exist. Create one before trying to select one"
	fi
	if ! playlistName="$(list_playlists | fzf -i --prompt='Select a playlist > ' --preview="cat \"${ConfDir}/\"{}.txt")"; then
		abort "Error: You didn't select a valid playlist."
	fi
	echo -e "$playlistName"
}

# lists the names of the playlists (without .txt)
list_playlists() {
	command ls -1 "$ConfDir" | grep -i ".txt$" | sed -e "s/\.txt//g"
}

# returns the number of playlists
playlist_count() {
	command ls -1 "$ConfDir" | wc -l
}

# ask the user for some input, hit enter to continue. "$1" is the prompt string
generic_input() {
	read -e -p "$1" -r "reply"
	echo -e "$reply"
}

# uses the current directory plus passed filenames to resolve relative paths
# into the correct format for a playlist file. accepts relative filenames from stdin
convert_to_playlist_filenames() {
	require sed
	relativeFilenames="$(cat)"
	# get absolute path of all of the music to be added
	absoluteFilenames="$(sed -e "s#^.##" -e "s#^#$PWD#" <<<"$relativeFilenames")"
	# make sure user gave data
	[ -z "$absoluteFilenames" ] && abort "Did not recieve any filenames to add"
	# if the $MusicDir is a link, (e.g. linked to some other drive)
	# also replace that path
	absoluteNoLinkFilename="$(realpath "$MusicDir")"
	# convert to relative filenames:
	echo -e "$absoluteFilenames" | sed -e "s|^${MusicDir%/}/||" -e "s|^${absoluteNoLinkFilename%/}/||"
}

# checks a playlist file for broken paths
check_playlist() {
	playlistToCheck="$1"
	printf "Checking '%s'...\n" "$playlistToCheck"
	while read -r song; do
		songFullPath="${MusicDir%/}/${song}"
		if [ ! -e "$songFullPath" ]; then
			printf "Error: '%s' doesn't exist\n" "$songFullPath" 1>&2
		fi
	done <"$playlistToCheck"
}

# "main"
run_plaintext_playlist() {
	# Validate Playlist based on given arguments
	# Prompt user if necessary
	case "$Action" in
	ADD | REMOVE | LIST | UNIQUE | PLAY | SHUFFLE | PLAYLIST_REMOVE)
		if [ -z "$ActivePlaylist" ]; then
			ActivePlaylist="$(pick_existing_playlist)" || exit 1
		fi
		ActivePlaylist=$(get_playlist_path "$ActivePlaylist" -x) || exit 1
		;;
	PLAYLIST_CREATE)
		if [ -z "$ActivePlaylist" ]; then
			ActivePlaylist="$(get_playlist_path "$(generic_input 'Name of new playlist: ')")" || exit 1
		fi
		;;
	esac

	# printf "%s\n" "$Action"
	# printf "%s\n" "$ActivePlaylist"
	# printf "%s\n" "$ReadInputType"
	# Run, based on Action
	case "$Action" in
	PLAYLIST_CREATE)
		if [ -f "$ActivePlaylist" ]; then
			printf "Warning: Playlist '%s' already exists.\n" "$ActivePlaylist" 1>&2
		else
			touch "$ActivePlaylist"
			printf "Created Playlist: '%s'\n" "$ActivePlaylist"
		fi
		;;
	PLAYLIST_LIST)
		find "$ConfDir" -type f -iname "*.txt"
		;;

	PLAYLIST_REMOVE)
		printf "Are you sure you want to delete '%s'? [y/N] " "$ActivePlaylist"
		read -r "response"
		if [[ $response =~ ^[Yy] ]]; then
			rm "$ActivePlaylist"
			printf "Deleted Playlist: '%s'\n" "$ActivePlaylist"
		fi
		;;
	PLAYLISTDIR)
		printf "%s\n" "$ConfDir"
		;;
	CHECK)
		find "$ConfDir" -type f -iname "*.txt" -print0 |
			while IFS= read -r -d '' playlistToCheck; do
				check_playlist "$playlistToCheck"
			done
		;;
	RESOLVE)
		[ ! $(command -v resolve_cmd_plainplay) ] && abort "Error: Couldnt find the resolve_cmd_plainplay command on your \$PATH"
		require python3
		resolve_cmd_plainplay "$ConfDir" "$MusicDir" "$ResolveAutoConfirm"
		;;
	ADD)
		case "$ReadInputType" in
		FROM_STDIN)
			filenamesToAdd=$(cat)
			echo -e "$filenamesToAdd" >>"$ActivePlaylist"
			;;

		MULTI_SELECT_FZF)
			require fzf
			if ! songsToAdd=$(FZF_DEFAULT_COMMAND="find -type f" fzf -m -i --prompt="Select songs to add. Hit 'Tab' to select multiple > "); then
				abort "Error: You didn't provide any songs to add..."
			fi
			fixedFilenames=$(convert_to_playlist_filenames <<<"$songsToAdd")
			echo -e "Adding the following to ${ActivePlaylist}:"
			echo -e "$fixedFilenames"
			echo -e "$fixedFilenames" >>"$ActivePlaylist"
			;;
		*)
			abort "Unrecognized selection type. Expected FROM_STDIN or MULTI_SELECT_FZF"
			;;

		esac
		;;
	REMOVE)
		require fzf
		if ! linesToRemove=$(FZF_DEFAULT_COMMAND="find -type f" fzf -m -i --prompt="Select songs to add. Hit 'Tab' to select multiple > " <"$ActivePlaylist"); then
			abort "Error: you didn't provide any songs to remove..."
		fi
		filteredSongs="$(grep -Fxv "$linesToRemove" <"$ActivePlaylist")"
		echo -e "$filteredSongs" >"$ActivePlaylist"
		;;
	LIST)
		cat "$ActivePlaylist"
		;;
	UNIQUE)
		require uniq
		filteredPlaylistFile=/tmp/filtered_playlist
		uniq "$ActivePlaylist" >"$filteredPlaylistFile"
		mv "$filteredPlaylistFile" "$ActivePlaylist"
		printf "Ran 'uniq' on %s\n" "$ActivePlaylist"
		;;
	PLAY)
		require mpv
		playCommand="cd \"${MusicDir}\" && mpv --playlist=- --no-audio-display <\"${ActivePlaylist}\""
		printf "Running command:\n%s\n" "$playCommand"
		eval "$playCommand"
		;;
	SHUFFLE)
		require mpv
		shuffleCommand="cd \"${MusicDir}\" && mpv --shuffle --playlist=- --no-audio-display <\"${ActivePlaylist}\""
		printf "Running command:\n%s\n" "$shuffleCommand"
		eval "$shuffleCommand"
		;;
	*)
		abort "Unexpected Error. Could not find action ${Action}"
		;;

	esac
}

check_for_help "$@"
application_setup
parse_args "$@"
run_plaintext_playlist "$Action" "$ActivePlaylist" || exit 1
